#!/bin/python3
#https://www.hackerrank.com/challenges/bfsshortreach/problem

import math
import os
import random
import re
import sys

#
# Complete the 'bfs' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER m
#  3. 2D_INTEGER_ARRAY edges
#  4. INTEGER s
#


def bfs(n, m, edges, s):
    distances = [-1] * n
    graph = {}
    for i in range(1,n+1):
        graph[i] = set()
    for u,v in edges:
        graph[u].add(v)
        graph[v].add(u)
    
    
    distances[s-1] = 0
    queue = [s]
    visited = set()
    while queue:
        node = queue.pop(0)
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)
                distances[neighbor-1] = distances[node-1] + 6
                visited.add(neighbor)
    
    del distances[s-1]
    return distances
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])

        m = int(first_multiple_input[1])

        edges = []

        for _ in range(m):
            edges.append(list(map(int, input().rstrip().split())))

        s = int(input().strip())

        result = bfs(n, m, edges, s)

        fptr.write(' '.join(map(str, result)))
        fptr.write('\n')

    fptr.close()
